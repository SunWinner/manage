log4j.rootLogger=DEBUG,Console,File
#定义日志输出目的地为控制台
log4j.appender.Console=org.apache.log4j.ConsoleAppender
log4j.appender.Console.Target=System.out
#可以灵活地指定日志输出格式，下面一行是指定具体的格式
log4j.appender.Console.layout = org.apache.log4j.PatternLayout
log4j.appender.Console.layout.ConversionPattern=%d %p %t %c %l- %m%n
#%c    输出所属类的全名，可写为 %c{Num} ,Num类名输出的范围  如："com.sun.aaa.classB", %C{2}将使日志输出输出范围为：aaa.classB
#%d    输出日志时间其格式为 可指定格式 如 %d{HH:mm:ss}等
#%l    输出日志事件发生位置，包括类目名、发生线程，在代码中的行数
#%n    换行符
#%m    输出代码指定信息，如info(“message”),输出message
#%p    输出日志的优先级，即 FATAL ,ERROR 等
#%r    输出从启动到显示该条日志信息所耗费的时间（毫秒数）
#%t    输出产生该日志事件的线程名
log4j.logger.java.sql.ResultSet=INFO
log4j.logger.org.apache=INFO
log4j.logger.java.sql.Connection=DEBUG
log4j.logger.java.sql.Statement=DEBUG
log4j.logger.java.sql.PreparedStatement=DEBUG
#文件大小到达指定尺寸的时候产生一个新的文件
log4j.appender.File = org.apache.log4j.RollingFileAppender
#指定输出目录
log4j.appender.File.File = logs/ssm.log
#定义文件最大大小
log4j.appender.File.MaxFileSize = 10MB
# 输出所以日志，如果换成DEBUG表示输出DEBUG以上级别日志
log4j.appender.File.Threshold = DEBUG
log4j.appender.File.layout = org.apache.log4j.PatternLayout
log4j.appender.File.layout.ConversionPattern =[%p] [%d{yyyy-MM-dd HH\:mm\:ss}][%c]%m%n